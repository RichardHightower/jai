package com.cloudurable.jai.model.text.completion.chat;

import com.cloudurable.jai.model.text.completion.CommonCompletionRequest;
import com.cloudurable.jai.model.text.completion.chat.function.Function;
import com.cloudurable.jai.model.text.completion.chat.function.FunctionalCall;

import java.util.*;

/**
 * Represents a chat request in a chat system.
 * <p>
 * Request for API Endpoint:
 * POST
 * <p>
 * https://api.openai.com/v1/chat/completions
 * <p>
 * Description:
 * This endpoint generates a response from the model based on a provided chat conversation.
 * <p>
 * Request Body:
 * <p>
 * model (string, required): ID of the model to be used. Refer to the model endpoint compatibility table for compatible models with the Chat API.
 * <p>
 * messages (array, required): A list of messages that form the conversation. Example code provided.
 * <p>
 * role (string, required): The role of the message author. Choose from system, user, assistant, or function.
 * <p>
 * content (string, optional): The content of the message. For assistant messages with function calls, content is not required.
 * <p>
 * name (string, optional): The name of the author of the message. Required if the role is function, and should match the function name. Can contain letters (a-z, A-Z), numbers (0-9), and underscores (_), with a maximum length of 64 characters.
 * <p>
 * functionCall (object, optional): The name and arguments of a function to be called, as generated by the model.
 * <p>
 * functions (array, optional): A list of functions for which the model may generate JSON inputs.
 * <p>
 * function_call (string or object, optional): Controls the model's response to function calls. Use "none" for the model to respond to the end-user, "auto" for the model to decide whether to call a function, or specify a particular function using {"name": "my_function"}.
 * <p>
 * temperature (number, optional): Sampling temperature between 0 and 2. Higher values (e.g., 0.8) make the output more random, while lower values (e.g., 0.2) make it more focused and deterministic. Either temperature or top_p should be modified, but not both.
 * <p>
 * topP (number, optional): Nucleus sampling parameter. The model considers tokens with top_p probability mass. For example, with top_p set to 0.1, only tokens comprising the top 10% probability mass are considered. Either top_p or temperature should be modified, but not both.
 * <p>
 * completionCount (n) (integer, optional): Number of chat completion choices to generate for each input message.
 * <p>
 * stream (boolean, optional): If set to true, partial message deltas will be sent as server-sent events (SSE). Tokens will be sent as data-only SSEs as they become available, and the stream will end with a data: [DONE] message. Example code provided.
 * <p>
 * stop (string or array, optional): Up to 4 sequences where the API should stop generating further tokens.
 * <p>
 * maxTokens (integer, optional): Maximum number of tokens to generate in the chat completion.
 * <p>
 * presencePenalty (number, optional): A number between -2.0 and 2.0. Positive values penalize new tokens based on their appearance in the conversation so far, encouraging the model to talk about new topics.
 * <p>
 * frequencyPenalty (number, optional): A number between -2.0 and 2.0. Positive values penalize new tokens based on their frequency in the conversation so far, reducing the model's likelihood to repeat the same line verbatim.
 * <p>
 * logitBias (map, optional): Modifies the likelihood of specific tokens appearing in the completion. It accepts a JSON object
 */
public class ChatRequest extends CommonCompletionRequest {
    private final List<Message> messages;
    private final List<Function> functions;
    private final FunctionalCall functionalCall;

    /**
     * Constructs a new ChatRequest object.
     *
     * @param model            the model to use for the chat request
     * @param messages         the list of messages in the chat request
     * @param functions        the list of functions available for the chat request
     * @param functionalCall   the functional call associated with the chat request
     * @param temperature      the temperature value for the chat request
     * @param topP             the top-p value for the chat request
     * @param stream           the stream flag indicating if the chat request should be streamed
     * @param stop             the list of stop tokens for the chat request
     * @param maxTokens        the maximum number of tokens for the chat request
     * @param presencePenalty  the presence penalty value for the chat request
     * @param frequencyPenalty the frequency penalty value for the chat request
     * @param logitBias        the logit bias map for the chat request
     * @param user             the user associated with the chat request
     * @param completionCount  the Number of chat completion choices to generate for each input message.
     */
    public ChatRequest(String model, List<Message> messages, List<Function> functions,
                       FunctionalCall functionalCall, float temperature, float topP,
                       boolean stream, List<String> stop, int maxTokens,
                       float presencePenalty, float frequencyPenalty,
                       Map<Integer, Float> logitBias, String user, int completionCount) {
        super(model, temperature, topP, completionCount, stream, stop, maxTokens, presencePenalty, frequencyPenalty, logitBias, user);
        this.messages = messages;
        this.functions = functions;
        this.functionalCall = functionalCall;
    }

    /**
     * Returns a new Builder instance to construct a ChatRequest object.
     *
     * @return a new Builder instance
     */
    public static Builder builder() {
        return new Builder();
    }

    /**
     * Gets the list of messages in the chat request.
     *
     * @return the list of messages in the chat request
     */
    public List<Message> getMessages() {
        return messages;
    }

    /**
     * Gets the list of functions available for the chat request.
     *
     * @return the list of functions available for the chat request
     */
    public List<Function> getFunctions() {
        return functions;
    }

    /**
     * Gets the functional call associated with the chat request.
     *
     * @return the functional call associated with the chat request
     */
    public FunctionalCall getFunctionalCall() {
        return functionalCall;
    }

    /**
     * Returns a string representation of the ChatRequest.
     *
     * @return a string representation of the ChatRequest
     */
    @Override
    public String toString() {
        return "ChatRequest{" +
                "model='" + getModel() + '\'' +
                ", messages=" + messages +
                ", functions=" + functions +
                ", functionalCall=" + functionalCall +
                ", temperature=" + getTemperature() +
                ", topP=" + getTopP() +
                ", stream=" + isStream() +
                ", stop=" + getStop() +
                ", maxTokens=" + getMaxTokens() +
                ", presencePenalty=" + getPresencePenalty() +
                ", frequencyPenalty=" + getFrequencyPenalty() +
                ", logitBias=" + getLogitBias() +
                ", user='" + getUser() + '\'' +
                '}';
    }

    /**
     * Checks if this ChatRequest is equal to another object.
     *
     * @param o the object to compare
     * @return true if the objects are equal, false otherwise
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ChatRequest)) return false;
        ChatRequest that = (ChatRequest) o;
        return Float.compare(that.getTemperature(), getTemperature()) == 0 &&
                Float.compare(that.getTopP(), getTopP()) == 0 &&
                isStream() == that.isStream() &&
                getMaxTokens() == that.getMaxTokens() &&
                Float.compare(that.getPresencePenalty(), getPresencePenalty()) == 0 &&
                Float.compare(that.getFrequencyPenalty(), getFrequencyPenalty()) == 0 &&
                Objects.equals(getModel(), that.getModel()) &&
                Objects.equals(messages, that.messages) &&
                Objects.equals(functions, that.functions) &&
                Objects.equals(functionalCall, that.functionalCall) &&
                Objects.equals(getStop(), that.getStop()) &&
                Objects.equals(getLogitBias(), that.getLogitBias()) &&
                Objects.equals(getUser(), that.getUser());
    }

    /**
     * Computes the hash code for this ChatRequest.
     *
     * @return the hash code value for this ChatRequest
     */
    @Override
    public int hashCode() {
        return Objects.hash(getModel(), messages, functions, functionalCall, getTemperature(), getTopP(),
                isStream(), getStop(), getMaxTokens(), getPresencePenalty(), getFrequencyPenalty(), getLogitBias(), getUser());
    }

    /**
     * Builder class for constructing ChatRequest objects.
     */
    public static class Builder {
        private String model;
        private List<Message> messages;
        private int completionCount;
        private List<Function> functions;
        private FunctionalCall functionalCall;
        private float temperature;
        private float topP;
        private boolean stream;
        private List<String> stop;
        private int maxTokens;
        private float presencePenalty;
        private float frequencyPenalty;
        private Map<Integer, Float> logitBias;
        private String user;

        private Builder() {
        }

        /**
         * Completion Count
         *
         * @return completionCount
         */
        public int getCompletionCount() {
            return completionCount;
        }

        /**
         * Completion Count
         *
         * @param completionCount completion Count
         * @return this
         */
        public Builder setCompletionCount(int completionCount) {
            this.completionCount = completionCount;
            return this;
        }

        /**
         * Add a logit bias
         *
         * @param token token
         * @param bias  bias
         * @return this
         */
        public Builder addLogitBias(Integer token, float bias) {
            this.getLogitBias().put(token, bias);
            return this;
        }

        /**
         * Returns the logit bias map for the chat request.
         *
         * @return logitBias
         */
        private Map<Integer, Float> getLogitBias() {
            if (logitBias == null) {
                logitBias = new TreeMap<>();
            }
            return logitBias;
        }

        /**
         * Sets the logit bias map for the chat request.
         *
         * @param logitBias the logit bias map for the chat request
         * @return the Builder instance
         */
        public Builder setLogitBias(Map<Integer, Float> logitBias) {
            this.logitBias = logitBias;
            return this;
        }

        /**
         * Model
         *
         * @return model
         */
        public String getModel() {
            return model;
        }

        /**
         * Sets the model used for the chat request.
         *
         * @param model the model used for the chat request
         * @return the Builder instance
         */
        public Builder setModel(String model) {
            this.model = model;
            return this;
        }

        /**
         * Messages
         *
         * @return messages
         */
        public List<Message> getMessages() {
            if (messages == null) {
                messages = new ArrayList<>();
            }
            return messages;
        }

        /**
         * Sets the list of messages in the chat request.
         *
         * @param messages the list of messages in the chat request
         * @return the Builder instance
         */
        public Builder setMessages(List<Message> messages) {
            this.messages = messages;
            return this;
        }

        /**
         * Functions
         *
         * @return functions
         */
        public List<Function> getFunctions() {
            if (functions == null) {
                functions = new ArrayList<>();
            }
            return functions;
        }

        /**
         * Sets the list of functions available for the chat request.
         *
         * @param functions the list of functions available for the chat request
         * @return the Builder instance
         */
        public Builder setFunctions(List<Function> functions) {
            this.functions = functions;
            return this;
        }

        /**
         * Function call
         *
         * @return function call.
         */
        public FunctionalCall getFunctionalCall() {
            return functionalCall;
        }

        /**
         * Sets the functional call associated with the chat request.
         *
         * @param functionalCall the functional call associated with the chat request
         * @return the Builder instance
         */
        public Builder setFunctionalCall(FunctionalCall functionalCall) {
            this.functionalCall = functionalCall;
            return this;
        }

        /**
         * Temp
         *
         * @return Temperature.
         */
        public float getTemperature() {
            return temperature;
        }

        /**
         * Sets the temperature value for the chat request.
         *
         * @param temperature the temperature value for the chat request
         * @return the Builder instance
         */
        public Builder setTemperature(float temperature) {
            this.temperature = temperature;
            return this;
        }

        /**
         * Top P
         *
         * @return top p
         */
        public float getTopP() {
            return topP;
        }

        /**
         * Sets the top-p value for the chat request.
         *
         * @param topP the top-p value for the chat request
         * @return the Builder instance
         */
        public Builder setTopP(float topP) {
            this.topP = topP;
            return this;
        }

        /**
         * Stream
         *
         * @return stream
         */
        public boolean isStream() {
            return stream;
        }

        /**
         * Sets the stream flag indicating if the chat request should be streamed.
         *
         * @param stream the stream flag indicating if the chat request should be streamed
         * @return the Builder instance
         */
        public Builder setStream(boolean stream) {
            this.stream = stream;
            return this;
        }

        /**
         * Stop
         *
         * @return stop
         */
        public List<String> getStop() {
            if (stop == null) {
                stop = new ArrayList<>();
            }
            return stop;
        }

        /**
         * Sets the list of stop tokens for the chat request.
         *
         * @param stop the list of stop tokens for the chat request
         * @return the Builder instance
         */
        public Builder setStop(List<String> stop) {
            this.stop = stop;
            return this;
        }

        /**
         * Max Tokens
         *
         * @return maxTokens
         */
        public int getMaxTokens() {
            return maxTokens;
        }

        /**
         * Sets the maximum number of tokens for the chat request.
         *
         * @param maxTokens the maximum number of tokens for the chat request
         * @return the Builder instance
         */
        public Builder setMaxTokens(int maxTokens) {
            this.maxTokens = maxTokens;
            return this;
        }

        /**
         * Presence Penalty
         *
         * @return presencePenalty
         */
        public float getPresencePenalty() {
            return presencePenalty;
        }

        /**
         * Sets the presence penalty value for the chat request.
         *
         * @param presencePenalty the presence penalty value for the chat request
         * @return the Builder instance
         */
        public Builder setPresencePenalty(float presencePenalty) {
            this.presencePenalty = presencePenalty;
            return this;
        }

        /**
         * Frequency Penalty
         *
         * @return frequencyPenalty
         */
        public float getFrequencyPenalty() {
            return frequencyPenalty;
        }

        /**
         * Sets the frequency penalty value for the chat request.
         *
         * @param frequencyPenalty the frequency penalty value for the chat request
         * @return the Builder instance
         */
        public Builder setFrequencyPenalty(float frequencyPenalty) {
            this.frequencyPenalty = frequencyPenalty;
            return this;
        }

        /**
         * getUser
         *
         * @return user
         */
        public String getUser() {
            return user;
        }

        /**
         * Sets the user associated with the chat request.
         *
         * @param user the user associated with the chat request
         * @return the Builder instance
         */
        public Builder setUser(String user) {
            this.user = user;
            return this;
        }

        /**
         * Add a function.
         *
         * @param function function to add
         * @return this.
         */
        public Builder addFunction(Function function) {
            this.getFunctions().add(function);
            return this;
        }

        /**
         * Add a stop.
         *
         * @param stop function to add
         * @return this.
         */
        public Builder addStop(String stop) {
            this.getStop().add(stop);
            return this;
        }

        /**
         * Add a message.
         *
         * @param message function to add
         * @return this.
         */
        public Builder addMessage(Message message) {
            this.getMessages().add(message);
            return this;
        }


        /**
         * Constructs a new ChatRequest object with the provided properties.
         *
         * @return a new ChatRequest object
         */
        public ChatRequest build() {
            return new ChatRequest(getModel(), getMessages(), getFunctions(), functionalCall, getTemperature(), getTopP(),
                    isStream(), getStop(), getMaxTokens(), getPresencePenalty(), getFrequencyPenalty(), getLogitBias(),
                    getUser(), getCompletionCount());
        }
    }
}
