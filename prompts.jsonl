{"prompt":"How is class named Item whose fully qualified class name com.cloudurable.java2csv.Item defined? ###-->","completion":"public class Item {\n\n    \/**\n     * Import body, the imports for the class.\n     *\/\n    private final String importBody;\n\n    \/**\n     *  Code body, the whole code for the item.\n     *\/\n    private final String body;\n\n    \/**\n     *  JavaDoc, the javadoc for the item.\n     *\/\n    private final String javadoc;\n\n    private final String name;\n\n    private final String simpleName;\n\n    private final String definition;\n\n    private final Item parent;\n\n    private final JavaItemType type;\n\n    \/**\n     * Constructs a new Item.\n     *\n     * @param importBody  the import statements associated with the item\n     * @param body        the source code body of the item\n     * @param javadoc     the Javadoc documentation of the item\n     * @param name        the fully qualified name of the item\n     * @param simpleName  the simple name of the item\n     * @param definition  the definition of the item\n     * @param parent      the parent item of the current item (e.g., for inner classes)\n     * @param type        the type of the item (e.g., class, method, field)\n     *\/\n    public Item(String importBody, String body, String javadoc, String name, String simpleName, String definition, Item parent, JavaItemType type) {\n        this.importBody = orEmptyString(importBody);\n        this.body = orEmptyString(body);\n        this.javadoc = orEmptyString(javadoc);\n        this.name = orEmptyString(name);\n        this.simpleName = orEmptyString(simpleName);\n        this.definition = orEmptyString(definition);\n        this.parent = parent;\n        this.type = type;\n    }\n\n    \/**\n     * Returns the column headers for the CSV representation of an Item.\n     *\n     * @return the column headers\n     *\/\n    public static List<String> headers() {\n        return List.of(\"Name\", \"Type\", \"FullName\", \"Definition\", \"JavaDoc\", \"Parent\", \"Imports\", \"Body\");\n    }\n\n    \/**\n     * Returns a builder to construct an Item.\n     *\n     * @return the Item builder\n     *\/\n    public static Builder builder() {\n        return new Builder();\n    }\n\n    private String orEmptyString(String part) {\n        return part == null ? \"\" : part;\n    }\n\n    \/**\n     * Returns a row representing the Item for the CSV output.\n     *\n     * @return the row representing the Item\n     *\/\n    public List<String> row() {\n        return List.of(simpleName, type.toString().toLowerCase(), name, definition, javadoc, parent != null ? parent.getName() : \"\", importBody, body);\n    }\n\n    \/**\n     * Returns the import statements associated with the item.\n     *\n     * @return the import statements\n     *\/\n    public String getImportBody() {\n        return importBody;\n    }\n\n    \/**\n     * Returns the source code body of the item.\n     *\n     * @return the source code body\n     *\/\n    public String getBody() {\n        return body;\n    }\n\n    \/**\n     * Returns the Javadoc documentation of the item.\n     *\n     * @return the Javadoc documentation\n     *\/\n    public String getJavadoc() {\n        return javadoc;\n    }\n\n    \/**\n     * Returns the fully qualified name of the item.\n     *\n     * @return the fully qualified name\n     *\/\n    public String getName() {\n        return name;\n    }\n\n    \/**\n     * Returns the definition of the item.\n     *\n     * @return the definition\n     *\/\n    public String getDefinition() {\n        return definition;\n    }\n\n    \/**\n     * Returns the parent item of the current item.\n     *\n     * @return the parent item\n     *\/\n    public Item getParent() {\n        return parent;\n    }\n\n    \/**\n     * Returns the type of the item.\n     *\n     * @return the item type\n     *\/\n    public JavaItemType getType() {\n        return type;\n    }\n\n    @Override\n    public String toString() {\n        return \"Item{\" + \"simpleName='\" + simpleName + ''' + \", type=\" + type + \", name='\" + name + ''' + \", definition='\" + definition + ''' + \", parent=\" + parent + \", importBody='\" + importBody + ''' + \", javadoc='\" + javadoc + ''' + \", body='\" + body + ''' + '}';\n    }\n\n    \/**\n     * Builder class for constructing an Item.\n     *\/\n    public static class Builder {\n\n        private String body;\n\n        private String javadoc;\n\n        private String name;\n\n        private String definition;\n\n        private Item parent;\n\n        private String importBody;\n\n        private String simpleName;\n\n        private JavaItemType type;\n\n        private Builder() {\n        }\n\n        public Builder simpleName(String simpleName) {\n            this.simpleName = simpleName;\n            return this;\n        }\n\n        public Builder type(JavaItemType type) {\n            this.type = type;\n            return this;\n        }\n\n        public Builder importBody(String importBody) {\n            this.importBody = importBody;\n            return this;\n        }\n\n        public Builder body(String body) {\n            this.body = body;\n            return this;\n        }\n\n        public Builder javadoc(String javadoc) {\n            this.javadoc = javadoc;\n            return this;\n        }\n ###END","count":1999}
{"prompt":"How is class named Builder whose fully qualified class name com.cloudurable.java2csv.Item.Builder defined? ###-->","completion":"public static class Builder {\n\n    private String body;\n\n    private String javadoc;\n\n    private String name;\n\n    private String definition;\n\n    private Item parent;\n\n    private String importBody;\n\n    private String simpleName;\n\n    private JavaItemType type;\n\n    private Builder() {\n    }\n\n    public Builder simpleName(String simpleName) {\n        this.simpleName = simpleName;\n        return this;\n    }\n\n    public Builder type(JavaItemType type) {\n        this.type = type;\n        return this;\n    }\n\n    public Builder importBody(String importBody) {\n        this.importBody = importBody;\n        return this;\n    }\n\n    public Builder body(String body) {\n        this.body = body;\n        return this;\n    }\n\n    public Builder javadoc(String javadoc) {\n        this.javadoc = javadoc;\n        return this;\n    }\n\n    public Builder name(String name) {\n        this.name = name;\n        return this;\n    }\n\n    public Builder definition(String definition) {\n        this.definition = definition;\n        return this;\n    }\n\n    public Builder parent(Item parent) {\n        this.parent = parent;\n        return this;\n    }\n\n    \/**\n     * Builds and returns the Item.\n     *\n     * @return the constructed Item\n     *\/\n    public Item build() {\n        return new Item(importBody, body, javadoc, name, simpleName, definition, parent, type);\n    }\n} ###END","count":565}
{"prompt":"How is method main defined from class class named Java2CSV whose fully qualified class name com.cloudurable.java2csv.Java2CSV? ###-->","completion":"public static void main(String[] args) throws IOException {\n    try {\n        final String directoryPath = args.length > 0 ? args[0] : \".\";\n        final String outputFile = args.length > 1 ? args[1] : \"output.csv\";\n        File dir = new File(directoryPath).getCanonicalFile();\n        if (dir.exists() && dir.isDirectory()) {\n            List<Item> items = scanDirectory(dir);\n            List<List<String>> lines = items.stream().map(Item::row).collect(Collectors.toList());\n            try (CSVWriter writer = new CSVWriter(new FileWriter(outputFile))) {\n                writer.writeNext(Item.headers().toArray(new String[0]));\n                for (List<String> line : lines) {\n                    writer.writeNext(line.toArray(new String[0]));\n                }\n            }\n        } else {\n            System.out.printf(\"Directory does not exist %s or is not a directory\", dir);\n        }\n    } catch (Exception ex) {\n        ex.printStackTrace();\n    }\n} ###END","count":460}
{"prompt":"What are the imports for class named Java2CSV whose fully qualified class name com.cloudurable.java2csv.Java2CSV? ###-->","completion":"import com.github.javaparser.StaticJavaParser;\n\nimport com.github.javaparser.ast.CompilationUnit;\n\nimport com.github.javaparser.ast.Node;\n\nimport com.github.javaparser.ast.body.*;\n\nimport com.github.javaparser.ast.nodeTypes.NodeWithName;\n\nimport com.github.javaparser.ast.nodeTypes.NodeWithSimpleName;\n\nimport com.github.javaparser.ast.type.ClassOrInterfaceType;\n\nimport com.github.javaparser.ast.visitor.VoidVisitorAdapter;\n\nimport com.opencsv.CSVWriter;\n\nimport java.io.File;\n\nimport java.io.FileWriter;\n\nimport java.io.IOException;\n\nimport java.nio.file.Files;\n\nimport java.nio.file.Path;\n\nimport java.util.ArrayList;\n\nimport java.util.List;\n\nimport java.util.Optional;\n\nimport java.util.regex.Matcher;\n\nimport java.util.regex.Pattern;\n\nimport java.util.stream.Collectors;\n\nimport java.util.stream.Stream;\n ###END","count":328}
{"prompt":"How is method getBodyDefinition defined from class class named Java2CSV whose fully qualified class name com.cloudurable.java2csv.Java2CSV? ###-->","completion":"private static String getBodyDefinition(Object n, int numLinesMax) {\n    String[] lines = n.toString().split(\"n\");\n    if (lines.length > numLinesMax) {\n        int count = 0;\n        StringBuilder builder = new StringBuilder(lines.length * 20);\n        for (String line : lines) {\n            builder.append(line).append('n');\n            count++;\n            if (count >= 200) {\n                break;\n            }\n        }\n        return builder.toString();\n    } else {\n        return n.toString();\n    }\n} ###END","count":276}
{"prompt":"How is method scanDirectory defined from class class named Java2CSV whose fully qualified class name com.cloudurable.java2csv.Java2CSV? ###-->","completion":"private static List<Item> scanDirectory(File directoryPath) throws IOException {\n    List<Item> items = new ArrayList<>(32);\n    try (Stream<Path> walk = Files.walk(directoryPath.toPath())) {\n        walk.filter(Files::isRegularFile).filter(p -> p.toString().endsWith(\".java\")).forEach(p -> parseFile(p.toFile(), items));\n    } catch (IOException e) {\n        \/\/ Handle the IOException if an error occurs while scanning the directory\n        System.err.println(\"An error occurred while scanning the directory: \" + e.getMessage());\n        throw e;\n    }\n    return items;\n} ###END","count":231}
{"prompt":"What methods does class named Item whose fully qualified class name com.cloudurable.java2csv.Item have? ###-->","completion":"public static List<String> headers() { \/* the rest ... *\/ }\npublic static Builder builder() { \/* the rest ... *\/ }\nprivate String orEmptyString(String part) { \/* the rest ... *\/ }\npublic List<String> row() { \/* the rest ... *\/ }\npublic String getImportBody() { \/* the rest ... *\/ }\npublic String getBody() { \/* the rest ... *\/ }\npublic String getJavadoc() { \/* the rest ... *\/ }\npublic String getName() { \/* the rest ... *\/ }\npublic String getDefinition() { \/* the rest ... *\/ }\npublic Item getParent() { \/* the rest ... *\/ }\npublic JavaItemType getType() { \/* the rest ... *\/ }\n@Override\npublic String toString() { \/* the rest ... *\/ } ###END","count":200}
{"prompt":"What methods does class named Java2CSV whose fully qualified class name com.cloudurable.java2csv.Java2CSV have? ###-->","completion":"private static String fieldName(FieldDeclaration field) { \/* the rest ... *\/ }\nprivate static String getSmallDefinition(String text) { \/* the rest ... *\/ }\nprivate static String getBodyDefinition(Object n, int numLinesMax) { \/* the rest ... *\/ }\npublic static void main(String[] args) throws IOException { \/* the rest ... *\/ }\nprivate static List<Item> scanDirectory(File directoryPath) throws IOException { \/* the rest ... *\/ }\nprivate static void parseFile(File file, List<Item> items) { \/* the rest ... *\/ } ###END","count":160}
